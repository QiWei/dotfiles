# Global settings SciTE (valid for all users)

# Note that the configuration of this file can be overridden by file SciTEUser.properties
# And *.properties files specific programming languages
# In addition, all settings can be modified by the script is embedded

# For Linux, place in $prefix/share/scite
# For Windows in the same directory where the SciTE.EXE (or Sc1.EXE)

# The idea to use this file in the section on the right belongs to Vadikan <unattended.oszone.net>
# SciTEÓÃ»§×Ô¶¨ÒåÉèÖÃ
# ×¢Òâ ¸ÃÎÄ¼þµÄÅäÖÃ½«¸²¸ÇÎÄ¼þSciTEGlobal.propertiesÖÐÏàÍ¬µÄÉèÖÃ.
# Windows ³ÌÐò, ·Åµ½ SciTE.EXE (»òÕßSc1.EXE)ËùÔÚÄ¿Â¼.
# ÎÄµµÔÚ http://www.scintilla.org/SciTEDoc.html
# QiWeiÖÆ×÷,ÓÃÓÚSciTEPortable(¸üÐÂ2009-12-27)
# Email:qiwei201@gmail.com
# Globals


[Main]							Various settings of the program
# Set the directory to store user SciteUserHome data
# (SciTEUser.properties, SciTE.session)
# Only works on Ru-Board
# scite.userhome=$(SciteDefaultHome)\home
scite.home=$(HOME)\.SciTE

# Set to 1 allows us to use a single configuration file located in the root of the project, instead of several local in each of the subdirectories
properties.directory.enable=1

# See the menu in full screen mode (invisible=1)
full.screen.hides.menu=1

# Minimize to tray
#~ minimize.to.tray=1

# After executing the code for F4 Selects the line - the source of errors
error.select.line=1

# 0 allows scrolling one page below the text
#~ end.at.last.line=0

# Set to 1 reduces the accuracy of the mapping activity/inactivity of toolbar buttons
# This can improve performance on relatively slow machines
#~ undo.redo.lazy=1

# The version of GTK + to determine the initial size of the file selection dialog called Open teams (Open) and save (Save). In Windows, this option does not work.
#~ fileselector.width=800
#~ fileselector.height=600
#~ fileselector.show.hidden=1

# Initial value increase (Zoom) the size of the font specified in the default style
# Set when you start SciTE or when changing screen resolution
# You can use both positive and negative values.
#~ magnification=0
#~ output.magnification=0

# Output data directly on the screen (0) or first into a buffer, and then to the screen (1)
buffered.draw=1
# With 1 - better quality (but slower) way to draw text
two.phase.draw=1
# 1 sets the color palette in 8-bit
use.palette=1

# Checking
# 1 includes a request to save when closing a file. About - saves the changes without asking.
are.you.sure=1

# 1 includes a request to save when you build (F7) file. About - saves the changes without asking.
#~ are.you.sure.for.build=1
#~ save.all.for.build=1

# 1 closes SciTE when closing the last tab
#~ quit.on.close.last=1

# 1 includes tracking so that it has not opened in SciTE file modified by another program
load.on.activate=1

# 1 includes a request to "file is modified by another program. Reload it?"
are.you.sure.on.reload=1

# 1 includes a request for preservation of "The file is modified by another program. Overwrite it?"
save.check.modified.time=1

# 1 includes the auto-save file when focus is lost SciTE
#~ save.on.deactivate=1

# 1 - when you reload the file is not removed undo history
reload.preserves.undo=1

# If SciTE open, the files are loaded into an existing copy of the program
check.if.already.open=1

# Determines the mode of language for the newly created (Ctrl+N) file before it is assigned a name
default.file.ext=.txt

# If defined in the complex. line of the file name without the extension is not found, then SciTE will try to open the file with the same name with the following extensions
source.default.extensions=.h|.cxx|.bat

# 1 - the dialogue "Open" to open the folder in the current file, 0 - which opened last
open.dialog.in.file.directory=1

# 1 while maintaining removes white space characters and tabs on the ends of lines
#~ strip.trailing.spaces=1

# 1 while maintaining appends the last line of the file line ending characters (if available)
#~ ensure.final.line.end=1

# 1 when saving the file to set the end of all lines of the current character line endings (CRLF, CR, LF)
ensure.consistent.line.ends=1

#~ save.deletes.first=1

# If you do not insert the translation ...
#~ translation.missing=***

# Open a new document in read only mode
#~ read.only=1

#~ max.file.size=1

# If 1 (default) moves the carriage in Visual C++ at the end of the indent (start of text) and if the carriage is there, on top of the line.
#~ vc.home.key=0

# Automatically create a backup file *.bak (auto_backup.lua)
# Option specifies the number of remaining options. The absence of a key or 0 - failure of a backup
#~ backup.files=1
# The directory for the backup (you can use environment variables)
# If no parameter backups are stored next to the original file
backup.path=$(TEMP)\$$$SciTE.tmp
#~ backup.path=_bak_

# Option selection.hide.on.deactivate=0 allows no selection from the text when the window loses focus SciTE.
selection.hide.on.deactivate=0

# If you can make a selection mnogkratnye mouse while holding down Ctrl (0 - disable this feature)
#~ selection.multiple=0

# When a print and insert text, click on the button BackSpace or Delete at the same time will be applied to all selected parts of the text
#~ selection.additional.typing=0

# Open a file by clicking the mouse on its name while holding key Ctrl (Select_And_Open_Filename.lua)
select.and.open.by.click=1

# A list of lexers and list of file extensions for which the opening and saving the file to automatically highlight links (HighlightLinks.lua)
#~ highlight.links.lexers=null
#~ highlight.links.exts=htm,html,php

# Auto backlight text that matches the current word or selection (highlighting_identical_text.lua)
highlighting.identical.text=0
# Limit the max number of entries (50 - default 0 - no limit).
#~ highlighting.identical.text.max=100

# Option change.overwrite.enable = 0 disables the ability to switch modes insertion/replacement
#~ change.overwrite.enable=0

# Moves the caret on the last character on the line (1-a rectangular selection, 2-mouse or cursor keys, 3-in both cases)
virtual.space=1

[Position]						The size and position window
# Position upper left corner of the window
if PLAT_WIN
  #~ position.left=0
  #~ position.top=0

if PLAT_GTK
  position.left=5
  position.top=22

# The width and height of the window (full screen=- 1)
#~ position.width=-1
#~ position.height=-1
#~ position.maximize=1

#~ horizontal.scrollbar=0
horizontal.scroll.width=100

# If a = 1, then the new window position.left = position.left + position.width the first window.
#~ position.tile=1

[Title]							The text in the header of the main window of SciTE
# Select how to display the file name in the title:
# 0(default) - displays only the file name
# 1 - shows - the path\filename
# 2 - shows - filename in path
title.full.path=2

# Do you see the number of active buffers and the total number of tabs in the header.
# 0 - not visible
# 1 - displayed
title.show.buffers=1

[Margin]						the amount of space for the window, the text column with line numbers and folding
# Whether or not the column with line numbers and labels(bookmarks).
line.margin.visible=1

# Allocate the column width, in terms of number of digits.
# To automatically increase the width of the field, it is necessary to add + numbers after
line.margin.width=2+

# The size of the column (in pixels) for labels(bookmarks). (Requires restart)
margin.width=13

# The size of the column (in pixels) for folding (folding/deployment procedures)
#~ fold.margin.width=13

# Size of the indent on both sides of the text (in pixels)
blank.margin.left=4
#~ blank.margin.right=4

# 0 disables tagging by clicking the mouse in the column of bookmarks (only in SciTE-Ru)
#~ margin.bookmark.by.single.click=0

[Output Screen]					The position and size of the console
# Automatically clears the console window before running any script
# Is executes the command output:ClearAll () (LUA)
#~ clear.before.execute=1

# 1 - the console window to the right, 0 - bottom
split.vertical=0

# Size of the console
#~ output.horizontal.size=200
#~ output.vertical.size=60
#~ output.initial.hide=1
#~ output.horizontal.scrollbar=0
#~ output.horizontal.scroll.width=10000
#~ output.scroll=0

output.cache.layout=3

# 1 - After completion of the command displays execution time (in seconds)
time.commands=1

# The size of a tab in the console window (using the script in SciTEStartup.lua)
output.tabsize=2

[Tabbar]						tab bar
# Show the tab bar (0 / 1)
tabbar.visible=1

# Hide the tab bar when only one file is open
tabbar.hide.one=0

# The tab bar has a few lines
tabbar.multiline=1

# Limit the length of the tab appears on the file name (only in SciTE-Ru)
tabbar.title.maxlength=20

# Show the status of the R / O in the name of the tab with the characters (only in SciTE-Ru)
tabbar.readonly.marker= â€¢

# Close the tab by double clicking on it (only in SciTE-Ru)
#~ tabbar.tab.close.on.doubleclick=1

# Of tabs
buffers=100

# Location of the list for a new tab (just in SciTE-Ru)
# 0 - open a new tab in the bottom of the list (default), 1 - after the current, 2 - at the beginning of the list
#~ buffers.new.position=1

# 1 - switch (Ctrl + Tab) will occur in the order in which the tabs were opened earlier (in other words - by number)
# After the close tab editor returns to the last open to this (revision SciTE-Ru)
#~ buffers.zorder.switching=1

[Braces and Tags]				Behavior brackets and tags
# Highlighting matching brackets (0 / 1)
braces.check=1
braces.sloppy=1

# Auto-parentheses. (Works with the lua script braces_autoclose.lua)
braces.autoclose=1
braces.open=({['"
braces.close=)}]'"
#~ braces.multiline=cpp,css,hypertext

# Auto-Tag. (Works with the lua script html_tags_autoclose.lua)
tags.autoclose=1

[Whitespace]					Display nonprinting characters (spaces, tabs, line endings)
# Show line endings
view.eol=0

# Sets the newline character (CR, LF or CRLF)
#~ eol.mode=LF

# This setting overrides eol.mode, and selects a newline character based on the current contents of the file
eol.auto=1

# Symbol to display non-printing characters
#~ control.char.symbol=Â°

Show # spaces and tabs (0 / 1)
view.whitespace=1
view.indentation.whitespace=1
view.indentation.guides=1
highlight.indentation.guides=1

[Indent]						Setting margins and tabs
# Amount of space
tabsize=4

# Amount of indentation to be used for automatic indentation
indent.size=4

# If 0 is a tab when you enter is automatically replaced by spaces
#~ use.tabs=0

# 1 in value and indent.size use.tabs taken from an open document
indent.auto=1

# 1 tab in the input is automatically replaced by spaces indent.size
#~ tab.indents=1

# 1 by pressing the backspace within indentation whitespace remove indent.size
backspace.unindents=1

# With 1 - inclusion of an automatic indentation
indent.automatic=1
indent.opening=0
indent.closing=0
#~ indent.maintain.*=0

[Wrap]							Set the width of the right to limit line and the transfer of long lines
# Set the width of the right to limit line (if more - it is considered excess and can be observed)
edge.column=100

# Method of Delivery Over-width (0 to not display, 1-Line, 2-color)
edge.mode=1

# Wrap long lines (0 / 1)
wrap=1

#~ wrap.style=2
wrap.visual.flags=3
wrap.visual.flags.location=1
wrap.visual.startindent=4
wrap.indent.mode=1

# By pressing the home end the cursor is positioned in line with the view of transfer
wrap.aware.home.end.keys=1

cache.layout=3

# Wrap long lines in the console (0 / 1)
output.wrap=1

[Folding]						Folding Blocks of text
# Turn on folding (0 / 1)
fold=1

# Fold when you open the file (0 / 1)
#~ fold.on.open=1

# Automatic shutdown of all sections at the opening of files of the specified type (RestoreRecent.lua)
fold.on.open.ext=properties,ini

# Type folding (2/4/8/16)
fold.flags=16

# The folding (0/1/2/3)
fold.symbols=3

fold.compact=0
fold.comment=1
fold.comment.python=1
fold.quotes.python=1
fold.preprocessor=1
fold.html.preprocessor=0

# Specifies the conditional symbol indicating the beginning of the block convolution for text files. If instead of the character set to 1, the start will be numbered headings. (FoldText.lua)
fold.text.outline=*
#~ fold.text.ext=txt,doc

[Find and Replace]				Find and Replace
# Search for the current file
#~ find.in.files.close.on.find=0
#~ find.replace.matchcase=1
#~ find.replace.escapes=1
#~ find.replace.regexp=1
find.replace.regexp.posix=1
#~ find.replace.wrap=0
#~ find.replacewith.focus=0

# If 1, then instead of the dialog box, search using the panel
find.use.strip=1
# If 1, then instead of the dialog box is used replacement panel
replace.use.strip=1

# If 0, then the search dialog does not close automatically
find.close.on.find=0

# 0 disables tagging after clicking "Mark all" in the search dialog (only in SciTE-Ru)
find.bookmark=0

# If 1, then when you click "Replace All" cursor returns to its original position (only in SciTE-Ru)
find.replace.return.to.start=1

# If 1, then when you click on "Mark all" removed any earlier marks (only in SciTE-Ru)
# (Previously established markers always removed)
#~ find.mark.delete=1

# Allows you to specify how the initial fields in the search dialog (only in SciTE-Ru)
# 0 (default) - if there is a selection and it does not contain line breaks, then use it, otherwise take the floor next to the cursor (as it was earlier),
# 1 - use the selection, if there is no selection, then leave the field blank,
# 2 - always leave the field blank.
#~ find.fillout=2

# Includes the button "Replace in Buffers" in the dialog box and change and find a certain style
find.replace.advanced=1

# Mark all occurrences of the text semi-transparent colored rectangle after clicking "Mark all" in the search dialog (very handy)
find.mark=#0F0F0F

# Find in Files
# Internal search, with the possibility of a recursive process, it is much preferable to external tools
find.command=
Utility # findstr is available on recent versions of Windows, including 2000
if PLAT_WIN
  #~ find.command=findstr /n /s /c:"$(find.what)" $(find.files)
  #~ find.input=$(find.what)
if PLAT_GTK
  #~ find.command=grep --line-number "$(find.what)" $(find.files)

# List of file extensions that will be searched
find.files=\
*|\
*.lua *.properties *.api|\
*.html *.htm *.php *.js|\
*.properties *.html *.xml *.iface|\
*.vbs *.js *.wsf *.hta *.lua|\
make* *.mak *.bat *.cmd *.e|\
*.vb *.vbs *.bas *.frm *.cls *.ctl|\
*.java *.js *.py *.pl *.rb *.cgi *.lua *.conf|\
*.asm *.c *.cc *.cpp *.cxx *.cs *.h *.hh *.hxx *.hpp *.rc|\
*.pas *.dpr *.dpk *.dfm *.res|\
*.idl *.odl *.rc *.rc2 *.dlg *.def

# Script parameters FindText.lua:
# Search is case sensitive
#~ findtext.matchcase=1
# Print all lines found in the console
findtext.output=1
# Show help on hot keys
findtext.tutorial=1

[Print]							Print (works only on Windows)
if PLAT_WIN
  print.colour.mode=4
  # The difference between the font size and font size specified in the settings to default style

  print.magnification=0

  # Setup: left, right, top, bottom margin, defined in terms of:
  # Hundredths of millimeters or thousandths of an inch
  print.margins=500,0,0,0

  # Header/footer:
  # && = &; &p = current page
  # &f = file name; &F = full path
  # &d = file date; &D = current date
  # &t = file time; &T = full time
  print.header.format = $ (FileNameExt) - Printed $ (CurrentDate), $ (CurrentTime) - Page $ (CurrentPage)
  print.footer.format = $ (FilePath) - File date: $ (FileDate) - File time: $ (FileTime)

  # Header/footer style
  print.header.style=font:Arial,size:8,bold,back:#BFBFBF
  print.footer.style=font:Arial Narrow,size:8,italics,back:#DFDFDF

[Export]						Export Options (menu "File" - "Export")
#~ export.keep.ext=1
export.html.wysiwyg=1
#~ export.html.tabs=1
#~ export.html.folding=1
export.html.styleused=1
#~ export.html.title.fullpath=1
#~ export.rtf.tabs=1
#~ export.rtf.font.face=Arial
#~ export.rtf.font.size=9
#~ export.rtf.tabsize=8

# Magnification (added to default screen font size)
export.pdf.magnification=0

# Font: Courier, Helvetica or Times (Courier line-wraps)
export.pdf.font=Courier

# Page size (in points): width, height
# E.g. Letter 612,792; A4 595,842; maximum 14400,14400
export.pdf.pagesize=595,842

# Margins (in points): left, right, top, bottom
export.pdf.margins=72,72,72,72

export.xml.collapse.spaces=1
export.xml.collapse.lines=1

[Help]							Displays help SciTE
if PLAT_WIN
  command.scite.help="$(SciteDefaultHome)\tools\html_HELP.hta" "$(SciteDefaultHome)\doc\SciTEDoc.html"
  command.scite.help.subsystem=2

if PLAT_GTK
  command.print.*=a2ps "$(FileNameExt)"
  command.scite.help=netscape "file://$(SciteDefaultHome)/doc/SciTEDoc.html"

# References for Programming Languages â€‹â€‹and api (tooltips) are connected to corresponding files. Properties

[Warnings]						Sound and text alerts
if PLAT_WIN
  # Sound alerts (works only on Windows. It contains pointers to the wav files)
  # FORMAT: <blinking windows (0 - do not blink) "," path to sound file "," length play (not required)>
  #~ warning.findwrapped=1,C:\WINDOWS\Media\chord.wav
  #~ warning.notfound=0,C:\WINDOWS\Media\ding.wav
  #~ warning.wrongfile=0,C:\WINDOWS\Media\Ir_begin.wav
  #~ warning.executeok=0,C:\WINDOWS\Media\ringin.wav
  #~ warning.executeko=1,C:\WINDOWS\Media\ringout.wav
  #~ warning.nootherbookmark=1,C:\WINDOWS\Media\ir_inter.wav

  # Text messages (Alert), if not defined, it does not occur (only in SciTE-Ru)
  #~ warning.findwrapped.message=Find wrapped!
  warning.notfound.message=Can't find!    
  warning.wrongfile.message=Wrong file name!
  #~ warning.executeok.message=Execute OK!
  #~ warning.executeko.message=Execute KO!
  warning.nootherbookmark.message=No other bookmarks!
  # Suppresses warning "Can not open file" (in SciTE-Ru)
  #~ warning.couldnotopenfile.disable=1

[StatusBar]						status bar
# Show the status bar (0/1)
statusbar.visible=1

statusbar.number=2

statusbar.text.1=\
Line $(LineNumber) Col $(ColumnNumber)\
  |  Select: $(SelHeight) lines  $(SelLength) bytes\
  |  $(OverType)\
  |  $(EOLMode)\
  |  $(font.current.size)px\
  |  $(scite.lexer.name)\
  |  $(editor.code.page.name)\
  |  $(FileAttr)

statusbar.text.2=\
FileName: $(FileNameExt)\
  |  $(NbOfLines) lines, $(BufferLength) bytes\
  |  Create: $(FileDate) $(FileTime)\
  |  FileAttr: $(FileAttr)

[International]					National Settings
# Name of interface localization
#~ locale.properties=locale-ru.properties
locale.properties=$(scite.home)\locale.zh_cn.properties
# Encoding of the editing window. Changes script CodePage.lua. It is used for functions string. {Upper | lower | len}
# editor.code.page=1251

# Unicode UTF-8
#~ code.page=65001

# Russian code.page
# ~ Code.page = 1251 - is not recommended! <http://code.google.com/p/scite-ru/issues/detail?id=49>
# character.set=204
# output.code.page=65001

# OEM DOS866
#~ code.page=866
#~ character.set=255

# Required for Unicode to work on GTK+:
#~ LC_CTYPE=en_US.UTF-8
#~ output.code.page=65001

# 1 includes the encoding of the text displayed in the console window OEM to ANSI (only in SciTE-Ru)
output.code.page.oem2ansi=1

# 1 includes the detection of coding dos866 (CodePage.lua)
code.page.866.detect=1

# Automatically detektiruet text in UTF-8 BOM header is not provided (only in SciTE-Ru)
# 1 - includes the detection and automatically adds the BOM header to editable text
# 2 - includes the detection, but adds a BOM.
utf8.auto.check=2

# File extensions that will be created and is maintained in the UTF-8 (new_file.lua)
#~ file.make.as.utf8=htm,html

# These variables are used to specify other parameters (word.characters)
chars.alpha=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
chars.numeric=0123456789
# Extended characters (in SciTE-Ru, this variable is set script CodePage.lua)
# ~

# Specifies the characters that are part of the words
word.characters.*=$(chars.alpha)$(chars.numeric)$(chars.accented)_

[Tools Menu]					User commands "Tools" menu
import SciTEToolsMenu.properties

[Context Menu]					Context Menu
# List of available built-in commands (IDM_ *) - in the file SciTE \ doc \ CommandValuesExt_rus.html
# Custom command = 9000 + number of commands in the Tools menu

# Context Menu Editor
user.context.menu.*=\
Undo|IDM_UNDO|\
Redo|IDM_REDO|\
||\
Cut|IDM_CUT|\
Copy|IDM_COPY|\
Paste|IDM_PASTE|\
Delete|IDM_CLEAR|\
||\
Select All|IDM_SELECTALL|\
\
Selected|POPUPBEGIN|\
Text -> In a new file|9$(CN_TEXT_IN_NEW_FILE)|\
Block Comment or Uncomment|IDM_BLOCK_COMMENT|\
||\
Make Selection Uppercase|IDM_UPRCASE|\
Make Selection Lowercase|IDM_LWRCASE|\
||\
Find in Files|IDM_FINDINFILES|\
Select|POPUPEND|\
||\
Find String/Word|9$(CN_FIND_STRING_WORD)|\
Toggle Bookmark|IDM_BOOKMARK_TOGGLE|\
\
Toggle Fold|POPUPBEGIN|\
Current|IDM_EXPAND|\
All folds|IDM_TOGGLE_FOLDALL|\
Recursive|IDM_TOGGLE_FOLDRECURSIVE|\
Toggle Fold|POPUPEND|\
||\
Close|IDM_CLOSE|

# Popup menu tabs
user.tabcontext.menu.*=\
Close|IDM_CLOSE|\
Close All|IDM_CLOSEALL|\
Close All but Current|9$(CN_CLOSE_ALL_BUT_CURRENT)|\
||\
Save|IDM_SAVE|\
Save|POPUPBEGIN|\
Save As|IDM_SAVEAS|\
Save a Copy|IDM_SAVEACOPY|\
||\
As HTML|IDM_SAVEASHTML|\
As RTF|IDM_SAVEASRTF|\
As PDF|IDM_SAVEASPDF|\
As LaTeX|IDM_SAVEASTEX|\
As XML|IDM_SAVEASXML|\
Save|POPUPEND|\
Save All|IDM_SAVEALL|\
||\
Move Tab Left|IDM_MOVETABLEFT|\
Move Tab Right|IDM_MOVETABRIGHT|\
||\
Copy To Clipboard|POPUPBEGIN|\
All Text|9$(CN_COPY_TO_CLIPBOARD_ALL)|\
||\
Path/Filename|9$(CN_COPY_TO_CLIPBOARD_FULLNAME)|\
Path|9$(CN_COPY_TO_CLIPBOARD_PATH)|\
Filename|9$(CN_COPY_TO_CLIPBOARD_FILENAME)|\
Copy To Clipboard|POPUPEND|\
||\
Text Size|POPUPBEGIN|\
Magnify|9$(CN_TEXT_SIZE_MAGNIFY)|\
Reduce|9$(CN_TEXT_SIZE_REDUCE)|\
Restore to Normal|9$(CN_TEXT_SIZE_NORMAL)|\
Text Size|POPUPEND|\
Encoding|POPUPBEGIN|\
Code Page Property|IDM_ENCODING_DEFAULT|\
UCS-2 Big Endian|IDM_ENCODING_UCS2BE|\
UCS-2 Little Endian|IDM_ENCODING_UCS2LE|\
UTF-8 with BOM|IDM_ENCODING_UTF8|\
UTF-8|IDM_ENCODING_UCOOKIE|\
||\
dos866 <-> win1251|9$(CN_CONVERT_OEM2WIN)|\
Encoding|POPUPEND|\
||\
Rename current file|9$(CN_RENAME_CURRENT_FILE)|\
Open in new window|9$(CN_OPEN_BUFFER_IN_NEW_WINDOW)|\
||\
Print|IDM_PRINT|

# Popup menu console
user.outputcontext.menu.*=\
Undo|IDM_UNDO|\
Redo|IDM_REDO|\
||\
Cut|IDM_CUT|\
Copy|IDM_COPY|\
Paste|IDM_PASTE|\
Delete|IDM_CLEAR|\
||\
Select All|IDM_SELECTALL|\
Clear Output|IDM_CLEAROUTPUT|\
||\
Find String/Word|9$(CN_FIND_STRING_WORD)|\
Selected text -> In a new file|9$(CN_TEXT_IN_NEW_FILE)|\
||\
Hide|IDM_TOGGLEOUTPUT|

[Shortcuts]						Custom shortcuts
# List of available built-in commands (IDM_ *) - in the file SciTE \ doc \ CommandValuesExt_rus.html
# Custom command = 9000 + number of commands in the Tools menu
user.shortcuts=\
Ctrl+PageUp|IDM_PREVFILE|\
Ctrl+PageDown|IDM_NEXTFILE|\
Ctrl+Alt+V|IDM_PASTEANDDOWN|\
Ctrl+F12|IDM_WRAP|\
Ctrl+Shift+KeypadMultiply|IDM_TOGGLE_FOLDALL|\
Alt+R|IDM_READONLY|\
Ctrl+Shift+PageUp|IDM_MOVETABLEFT|\
Ctrl+Shift+PageDown|IDM_MOVETABRIGHT|\
$(user.shortcuts.add)

[ToolBar]						Customizing the toolbar in the default
# Show button bar (0 / 1)
toolbar.visible=1

# Sets the toolbar to format:
# Tooltip | IDM_ constant or number in the menu Tools + 9000 | Number icon
user.toolbar.*=\
|||\
New|IDM_NEW|0|\
Open|IDM_OPEN|1|\
Save|IDM_SAVE|2|\
Save All|IDM_SAVEALL|30|\
|||\
Print|IDM_PRINT|3|\
|||\
Cut|IDM_CUT|4|\
Copy|IDM_COPY|5|\
Paste|IDM_PASTE|6|\
Delete|IDM_CLEAR|7|\
|||\
Undo|IDM_UNDO|8|\
Redo|IDM_REDO|9|\
|||\
Find|IDM_FIND|10|\
Replace|IDM_REPLACE|11|\
|||\
Go|IDM_GO|16|\
Build|IDM_BUILD|17|\
Compile|IDM_COMPILE|18|\
|||\
Run Current Macro|IDM_MACROPLAY|13|\
Stop Recording Macro|IDM_MACROSTOPRECORD|14|\
Record Macro|IDM_MACRORECORD|15|\
|||\
End of Line|IDM_VIEWEOL|19|\
Change Fonts|IDM_MONOFONT|21|\
Read-Only|IDM_READONLY|22|\
Wrap|IDM_WRAP|29|\
|||\
Output|IDM_TOGGLEOUTPUT|23|\
Full Screen|IDM_FULLSCREEN|24|\
|||\
Open Global Options File|IDM_OPENGLOBALPROPERTIES|26|\
Open User Options File|IDM_OPENUSERPROPERTIES|27|\
Open Abbreviations File|IDM_OPENABBREVPROPERTIES|28|\
|||\
Help|IDM_HELP|25

# Connect to a custom toolbar (it will replace the built-defined above!)
#~ import toolbar\toolbar_gnome.properties
import toolbar\toolbar_cool.properties

[Session & Settings]			options save the settings and work with sessions
# Keep a list of recently launched files (File menu)
save.recent=1

# When you start SciTE to open files that have worked in the past session
save.session=1

# Keep in session file status labels
session.bookmarks=1

# Keep in session file Folding
session.folds=1

# Keep the session to a file position and size of the window SciTE
save.position=1

# Log file when you exit the session only if more than one tab open (only in SciTE-Ru)
#~ save.session.multibuffers.only=1

# Max number of points (to 30) in the list of recently opened files (only in SciTE-Ru)
#~ save.recent.max=15

# Optional file used SciTE.recent (for storing information about files opened ALL) (RestoreRecent.lua and RestoreRecent.js)
save.session.recent=1

# Use SessionManager.hta for opening and saving sessions
#~ session.manager=1
# At the close of SciTE open dialogue SessionManager.hta to save the current session
#~ save.session.manager.on.quit=1
# At the close SciTE automatically create the file "currentfilename_num.session" with the contents of the current session
#~ save.session.on.quit.auto=1

# Controls whether or not to close any open files already loaded in the session (only in SciTE-Ru)
# Default = 1, and all tabs are closed before booting
#~ session.close.buffers.onload=0

# Keep the session in a file some install SciTE (save_settings.lua)
save.settings=1

# Make variables available from the file SciTE.session
import home\SciTE.session

[Styles]						Font and color settings
# Set user-defined variables for the fonts used in the standard styles.
if PLAT_WIN
# -----------------------------------------------------------
  # The first selection of fonts - monospace (replaces the 2nd set after pressing the Ctrl + F11)
  font.0.base=font:Yahei Mono,size:10
  font.0.small=font:Yahei Mono,size:8
  font.0.comment=font:Yahei Mono,size:9,italics

  # The second selection of fonts - proportional (replace the 1st set after pressing the Ctrl + F11)
  font.1.base=font:Verdana,size:10
  font.1.small=font:Microsoft Sans Serif,size:8
  font.1.comment=font:Comic Sans MS,size:8

  # Determine which of the sets of fonts to be used by default
  font.base=$(font.0.base)
  font.small=$(font.0.small)
  font.comment=$(font.0.comment)
  
  # To switch between sets is done using a script FontChanger.lua

  # Variable font.monospace often used in language files
  # And is also used in the script SciTEHexEdit.lua
  font.monospace=$(font.base)
# -----------------------------------------------------------

if PLAT_GTK
	font.base=font:!Bitstream Vera Sans,size:9
	font.small=font:!Bitstream Vera Sans,size:8
	font.comment=font:!Bitstream Vera Serif,size:9

# Define types of flowers that then use them in all languages. Properties.
colour.comment=fore:#008000
colour.code.comment.doc=$(colour.comment),back:#FEFEFE
colour.embedded.comment=back:#E0EEFF

colour.number=fore:#AC00A9
colour.keyword=fore:#0000DF
colour.string=fore:#5E5EAE
colour.char=$(colour.string)
colour.operator=fore:#FF0000
colour.preproc=fore:#7F7F00
colour.error=fore:#FFFF00,back:#FF0000
colour.whitespace=fore:#808080

# Possible values â€‹â€‹for the line style:
# font:<name>, size:<number>, fore:<colour>, back:<colour>, italics|notitalics, bold|notbold, eolfilled|noteolfilled, underlined|notunderlined, case:m|u|l, visible|notvisible, changeable|notchangeable
# If the line style parameter is mentioned twice (to avoid!), The rightmost value is valid.

# Global default styles for all programming languages

# The default style, and its features will be inherited by all other styles
style.*.32=$(font.base)

# The background color of the field with numbered lines in the read-only mode (using a script ReadOnly.lua)
# If not specified, the background in ReadOnly mode does not change
style.back.readonly=#FFEEEE

Style # for line numbers (from left)
style.*.33=font:Microsoft Sans Serif,size:8,notbold

Style # is used to display a pair of brackets () or {}
style.*.34=back:#99FFCC,bold

Style # is used to display the unclosed parentheses (or {
style.*.35=back:#FFAAFF,bold
# Note: To see background colors in the style .*. 34 and style .*. 35, you must either disable or caret.line.back use transparency (caret.line.back.alpha)

Style # for non-printable characters. This - not the full style. And the foreground and background colors for these symbols are defined accordingly Lexer-ohm, and this style is not
style.*.36=

# Indentation guides
style.*.37=fore:#C0C0C0

Style # tooltips on the syntax (taken from the API file)
style.*.38=font:MS Sans Serif,size:9

# -------------------------------------------------------------
Column # for folding (folding / deployment procedures)
fold.margin.colour=#ECE9D8
#~ fold.margin.highlight.colour=#0000FF
fold.highlight.colour=#0099FF

# Color of excessive length strings (or limit line)
edge.colour=#FFE8FF

# The color of selected text
selection.fore=
# DADADA used as background because it yields standard silver C0C0C0
# on low colour displays and a reasonable light grey on higher bit depths
if PLAT_WINNT
	selection.alpha=50
	selection.back=#000000
if PLAT_GTK
	selection.alpha=30
	selection.back=#000000

#~ selection.additional.fore=#0000A0
#~ selection.additional.back=#000080
#~ selection.additional.alpha=20

# Whitespace (space, tab)
whitespace.fore=#8F8F8F
#~ whitespace.back=#FFF0F0

# Colour rim tags
#~ bookmark.fore=#000000

# Background color for label
#~ bookmark.back=#AA0000
#~ bookmark.alpha=

# Colour rim marks on the line with a source of error (the default # 7F0000)
#~ error.marker.fore=#FF0099

# Background color for label strings in the code with the source of errors, and in line with the text of the error console (default # FFFF00)
#~ error.marker.back=#FF9999

# The background color of the text string error in the console window (if you want color, different from error.marker.back) (only in SciTE-Ru)
#~ error.line.back=#330000

# Cursor
caret.fore=#0000FF

# Highlight color line with the cursor
caret.line.back=#0099FF

# Transparency (from 0 to 255) characters on a line with the cursor
caret.line.back.alpha=30

# Cursor in the console window (only in SciTE-Ru)
output.caret.fore=#0000FF

# Highlight color line with the cursor in the console window (only in SciTE-Ru)
output.caret.line.back=#0099FF

# Transparency (from 0 to 255) characters on a line with the cursor in the console window (only in SciTE-Ru)
output.caret.line.back.alpha=30

# Styles markers highlight the text used in scripts (from 0 to 31)
# Format string value: <color> <style> <Transparency>, where
# <Style> can be:
#  plain, squiggle, tt, diagonal, strike, hidden, roundbox, box
# <Opacity> = @ <number> transparency for the fill style roundbox, a number from 0 to 255
# If no color is specified, the marker color find.mark default
# If no style is specified, roundbox

# For paired_tags.lua:
indic.style.11=#0000FF
indic.style.12=#FF0000
# For HighlightLinks.lua:
indic.style.13=#0000FF,plain
# For highlighting_identical_text.lua:
indic.style.14=#FF9900,box
indic.style.15=#FF0000,box
# For highlighting_text.lua:
highlighting.text.marker=16
indic.style.16=#FF0080,@120
# For FindText.lua:
findtext.first.mark=27
indic.style.27=#CC00FF,@50
indic.style.28=#0000FF,@50
indic.style.29=#00FF00,@50
indic.style.30=#FFFF00,@100
indic.style.31=#11DDFF,@80

[Caret]							Cursor
# The cursor blink rate [ms]
caret.period=500

# Flicker in all secretions
#~ caret.additional.blinks=0

# The width of the cursor
#~ caret.width=2

caret.policy.xslop=1
caret.policy.width=20
caret.policy.xstrict=0
caret.policy.xeven=0
caret.policy.xjumps=0
caret.policy.yslop=1
caret.policy.lines=1
caret.policy.ystrict=1
caret.policy.yeven=1
caret.policy.yjumps=0
#~ visible.policy.strict=1
#~ visible.policy.slop=1
#~ visible.policy.lines=4
#~ caret.sticky=1

[Abbrev & API]					General setup for auto-completion and tooltips on the syntax
# If a SciTE letters you type will helpfully prompts you with the options add-on.
autocompleteword.automatic=1

# If a hint is multivariant (only in SciTE-Ru)
autocompleteword.incremental=1

# (Individual settings for languages â€‹â€‹- relevant. Properties)
autocomplete.*.ignorecase=1
calltip.*.ignorecase=1

# Script parameters abbrevlist.lua:
# If a tag tabs are not cleared after moving them to Tab. Their user manually removes the combination of Ctrl + Tab.
#~ abbrev.multitab.clear.manual=1
# Instead of invisible tags will display the specified style
#~ abbrev.multitab.indic.style=#FF6600,diagonal
# The maximum width of the drop-down list of abbreviations transcripts
abbrev.list.width=80

[Menu Language]					Start Menu "Highlight" (switching algorithm to recognize the contents of different file types)
# Each item contains three parts: menu string | file extension | key
# The only keys allowed currently are based on F-keys and alphabetic keys and look like
# [Ctrl+][Shift+][Fn|a] such as F12 or Ctrl+Shift+D.
# A '&' may be placed before a letter to be used as an accelerator. This does not work on GTK+.
menu.language=\
Text|txt|Shift+F11|\
#~ Ada|ads||\
#~ ABAP|abap||\
AutoIt3|au3||\
AutoHotkey|ahk||\
#~ Apache Confi&g|conf||\
#~ Atmel AVR|avr||\
Assembler|asm||\
#~ ASN.1|asn1||\
#~ Avenue|ave||\
#~ Baan|bc||\
Basic|bas||\
&Batch|bat||\
#~ Bullant|ant||\
&C / C++|c||\
#~ CMake|cmake||\
C&#|cs||\
#~ Csound|orc||\
CSS|css||\
#~ D|d||\
&Difference|diff||\
#~ &Eiffel|e||\
#~ Erlang|erl||\
&Errorlist|err||\
#~ Euphoria|e||\
#~ FlagShip|prg||\
#~ Forth|forth||\
#~ &Fortran|f90||\
#~ Gap|g||\
H&ypertext|html|F12|\
#~ &InnoSetup|iss||\
&Java|java||\
Java&Script|js|Alt+Shift+F12|\
#~ &Kix|kix||\
#~ TeX|tex||\
#~ Lisp|lisp||\
#~ Lot|lot||\
#~ Lout|lt||\
Lu&a|lua||\
#~ Matlab|m.matlab||\
&Makefile|mak|Ctrl+Shift+F11|\
#~ MetaPost|mp||\
#~ MMIXAL|mms||\
&nnCron crontab|tab||\
NSIS|nsi||\
#~ Objective Caml|ml||\
#~ Octave|m.octave||\
#~ Opal|impl||\
Pascal|pas||\
Pe&rl|pl||\
P&HP|php||\
#~ P&LSQL|spec||\
&Properties|properties||\
#~ P&ostScript|ps||\
#~ P&OV-Ray SDL|pov||\
#~ PowerShell|ps1||\
Pytho&n|py||\
#~ R|R||\
Reso&urce|rc||\
#~ Ruby|rb||\
Shell|sh||\
S&QL|sql||\
#~ Specman|e||\
#~ &TCL|tcl||\
&VB|vb||\
VBScr&ipt|vbs||\
#~ Verilog|v||\
#~ VHDL|vhd||\
&XML|xml|Shift+F12|\
#~ YAML|yaml||

[Languages]						Import all of the specialized configuration files for specific programming languages
# The files name ends with an underscore are slightly different from the official distribution, distributed
# Comment out unused languages â€‹â€‹you!
#~ import languages\abap
#~ import languages\ada
#~ import languages\avr
import languages\asm
#~ import languages\asn1
import languages\au3
import languages\ahk
#~ import languages\ave
#~ import languages\baan
#~ import languages\blitzbasic
#~ import languages\bullant
#~ import languages\caml
import languages\conf
import languages\cpp
#~ import languages\cmake
#~ import languages\d
#~ import languages\csound
import languages\css
#~ import languages\eiffel
#~ import languages\erlang
#~ import languages\escript
#~ import languages\euphoria
#~ import languages\flagship
#~ import languages\forth
#~ import languages\fortran
#~ import languages\freebasic
import languages\html
#~ import languages\inno
#~ import languages\kix
#~ import languages\latex
#~ import languages\lisp
#~ import languages\lot
#~ import languages\lout
import languages\lua
# Uncomment to enable LuaInspect and script_lua lexer!
#~ import languages\script_lua
#~ import languages\matlab
#~ import languages\metapost
#~ import languages\mmixal
import languages\nncrontab
import languages\nsis
#~ import languages\opal
import languages\pascal
import languages\perl
#~ import languages\pov
#~ import languages\powershell
#~ import languages\ps
#~ import languages\purebasic
import languages\python
#~ import languages\rebol
#~ import languages\ruby
#~ import languages\scriptol
import languages\text
#~ import languages\smalltalk
#~ import languages\spice
#~ import languages\specman
import languages\sql
#~ import languages\tcl
#~ import languages\tex
import languages\vb
#~ import languages\verilog
#~ import languages\vhdl
#~ import languages\yaml
# More undocumented languages â€‹â€‹(*. properties; *. abbrev; *. ini; *. inf; *. reg;. Txt; *. log; *. lst; *. doc; *. bat; *. cmd; etc. .)
import languages\others

[Open]							Preferences file filters in dialogs for opening and saving files
source.files=All Source|\
*.asm;*asp;*.au3;*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;\
*.rc;*.rc2;*.dlg;*.def;\
*.vb;*.vbs;*.bas;*.frm;*.cls;*.ctl;\
*.java;*.js;*.py;*.pl;*.rb;*.cgi;*.lua;*.conf;\
make*;*.mak;\
*.properties;*.xml;*.iface;*.bat;*.e;\
*.sql;*.php;*.inc;*.css;*.js;*.html;*.htm;*.hta|

if PLAT_WIN
	all.files=All Files (*.*)|*.*|
if PLAT_GTK
	all.files=All Files (*)|*|Hidden Files (.*)|.*|

# Record Format: Explanatory text | wildcards |
# There is a limit (possibly 256 characters) on the length of the filter in Windows, so not all extensions can be displayed
open.filter=\
$(source.files)\
$(all.files)\
$(filter.abap)\
$(filter.ada)\
$(filter.conf)\
$(filter.ahk)\
$(filter.asm)\
$(filter.asn1)\
$(filter.ave)\
$(filter.baan)\
$(filter.bash)\
$(filter.caml)\
$(filter.cmake)\
$(filter.cpp)\
$(filter.ch)\
$(filter.css)\
$(filter.d)\
$(filter.eiffel)\
$(filter.erlang)\
$(filter.fortran)\
$(filter.gap)\
$(filter.idl)\
$(filter.inno)\
$(filter.java)\
$(filter.js)\
$(filter.kix)\
$(filter.lout)\
$(filter.lua)\
$(filter.matlab)\
$(filter.metapost)\
$(filter.mmixal)\
$(filter.nncrontab)\
$(filter.nsis)\
$(filter.opal)\
$(filter.pascal)\
$(filter.perl)\
$(filter.php)\
$(filter.pov)\
$(filter.powershell)\
$(filter.prg)\
$(filter.properties)\
$(filter.ps)\
$(filter.python)\
$(filter.r)\
$(filter.ruby)\
$(filter.sql)\
$(filter.specman)\
$(filter.tcl)\
$(filter.tex)\
$(filter.text)\
$(filter.vb)\
$(filter.web)\
$(filter.yaml)\
$(filter.verilog)\
$(filter.vhdl)

save.filter=$(open.filter)

[LUA]							Connecting external loading LUA script
ext.lua.startup.script=$(scite.home)\Lua\SciTEStartup.lua
#~ ext.lua.auto.reload=0
#~ ext.lua.reset=1

[Macros]						macro
# The path to the macro file (default $(scite.userhome)\SciTE.macro or $(SciteDefaultHome)\SciTE.macro)
#~ macro.file.path=

# Read the macros from the macro file when you run the editor
macro.load.on.startup=1

# Automatically record macros in the current macro file
macro.autosave=1

# Open dialog specify the name of a macro after its recording (requires an external library shell)
macro.fill.name.dialog=1

# Position in the list of macros to re-recorded (default = 1)
# -1 - Sets added to the end of the list
#~ macro.new.record.position=-1

Style # for line numbers (from left) while recording a macro
macro.recording.numfield.style=$(style.*.33),back:#E9B6C9

[SideBar]						Settings multifunctional sidebar (SideBar.lua)
# Use the sidebar for a separate window: 1-yes, 0-no (default)
#~ sidebar.win=1
# Show SideBar when you start the Editor: 1-yes, 0-no (default)
sidebar.show=1
# The position and width of the panel
#~ sidebar.position=left
#~ sidebar.width=300
# Show the flags of functions: 1-yes, 0-no (default)
#~ sidebar.functions.flags=1
# Show function parameters: 1-yes, 0-no (default)
#~ sidebar.functions.params=1
# The process for a preview of abbreviations: 1-calltip, 0-annotation (default)
# sidebar.abbrev.calltip=1
Style # for annotations
style.*.255=fore:#808080,back:#FEFEFE
